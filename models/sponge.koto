from fidget import square, sqrt, max, abs

# Menger sponge, with optional sphere-ification
# Recommended render settings: --scale 0.75 --pitch -25 --yaw -30

recurse = |x, y, z, depth|
    r = abs((x + 1) % 2 - 1)
    base = intersection(r, r.remap_xyz(y, x, z)) - 1/3.0
    out = base
    for i in 0..depth
        out = union(base, out.remap_xyz(x * 3, y * 3, z))
    out

shape_square = intersection(abs(x) - 1, abs(y) - 1)
xy = difference(shape_square, recurse(x, y, z, 3))
yz = xy.remap_xyz(y, z, x)
zx = xy.remap_xyz(z, x, y)
shape_sponge = intersection(intersection(xy, yz), zx)

radius = sqrt(square(x) + square(y) + square(z))
manhattan = max(abs(x), max(abs(y), abs(z)))
rescale = manhattan / radius
blend = 1.0  # adjust the sphere-ness of the sponge
r = (rescale * blend) + (1.0 - blend)

shape_sponge.remap_xyz(x / r, y / r, z / r)
